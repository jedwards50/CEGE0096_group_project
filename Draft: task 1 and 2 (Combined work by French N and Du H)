# GEOG0096 - 2nd Assignment (Group Programming Project)
# Task 1 & 2 - Drafts
# Student Name: Hongmin Du
# Student Number: 20066724

# The ideas of making those codes mainly referred to the lecture slides and Jupyter Notebook notes.
# Official tutorials of used python packages were also referred.
# This software should be run with the given materials, some packages for GIS will need to be imported before running this project.


# 0.1 - Import required packages for the following steps
import os
import geopandas as gpd
import numpy as np
import rasterio
from rasterio import plot, windows
from shapely.geometry import Point, Polygon
import matplotlib.pyplot as plt


# 0.2 - Title for the software and its background:
print("**** GEOG0096 Assignement 2 - Flood Emergency Planning - Dragonfly (0.1) ****")
print("Extreme flooding is expected on the Isle of Wightand, and the authority in charge of planning the emergency response is advising everyone to proceed by foot to the nearest high ground.")
print("This software will give the quickest route from the user's current location to the highest point within a 5km radius in the chosen area.")


# Task 1. User Input
# In this task, this software should:
# Ask the user to input their current location as a British National Grid coordinate (easting and northing)
# Test whether the user is within a box (430000, 80000) and (465000, 95000)

# 1.0 - Introduction
print("Firstly, let's check whether your location is included in the testing area!")

# 1.1 - Define: Point
# The user should input the number of both easting and northing to make a point for the location in the following checks.
def input_easting_and_northing():
    easting = float(input('Please input the value of your easting (use British National Grid): '))
    northing = float(input('Please input the value of your northing (use British National Grid): '))
    return easting, northing

p = Point(input_easting_and_northing())

# 1.2 - Give the testing area 
testing_area = Polygon([(430000, 80000), (430000, 95000), (465000, 95000), (465000, 80000)])

# 1.3 - Let the user input the easting and northing and test whether the point is in the testing area
# Notice: the easting and northing should follow the style of British National Grid
if p.within(testing_area):
    print("This location can be tested by this software!")
else:
    print("This location is outside the testing area!")
    quit_or_reenter = input("Type 'q' to quit or 'r' to re-enter your co-ordinates.")
    if quit_or_reenter == 'q':
        quit()
    elif quit_or_reenter == 'r':
        p = Point(input_easting_and_northing())


# Task 2. Highest Point Identification
# In this task, this software should:
# Identify the highest point within a 5km radius from the user location.

# 2.0 - Introduction
print("Next, let's find the highest point within a 5km radius from the user location!"
      "\n Loading...")

# 2.1 - Open elevation file
source = r'.\Material\elevation\SZ.asc'
src = rasterio.open(os.path.join(source))

# 2.2 - Create buffer around point.
buffer_5km = p.buffer(5000)

# 2.3 - Create a rasterio window for the point
# Notice: Have not gotten the full idea for this part!! Still need more changes!! 

with rasterio.open(os.path.join(source)) as src:
    w = src.read(1, window=window((p.x - 5000.0), (p.y - 5000.0), (p.x + 5000.0), (p.y + 5000.0), src.transform))
# NameError: name 'window' is not defined

# 2.4 - Find point of maximum elevation.
max_ele_value = np.max(buffered_ele[0])
max_ele_index = np.where(buffered_ele[0] == np.max(buffered_ele[0]))

print("The maximum elevation within 5km of your point is ", max_ele_value, "m. It's index is", max_ele_index)

# 2.5 - Plot the buffered raster.
rasterio.plot.show(buffered_ele[0])

